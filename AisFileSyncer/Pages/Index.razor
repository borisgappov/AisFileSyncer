@page "/"
@using System
@using AisFileSyncer.Infrastructure.Interfaces
@using AisFileSyncer.Infrastructure.Models
@inject ISyncer _syncer

@if (files == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="SyncClick" disabled="@Downloading">Sync</button>
    <button class="btn btn-primary" @onclick="Cancel" disabled="@NotDownloading">Cancel</button>

    <table class="table">
        <thead>
            <tr>
                <th>File Name</th>
                <th>Status</th>
                <th>Progress, %</th>
                <th>Download time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in files)
            {
                <tr>
                    <td>@file.Name</td>
                    <td>@file.DownloadStatus</td>
                    <td>@file.Percent</td>
                    <td>@file.DownloadSpan.ToString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    FileModel[] files;

    protected bool Downloading
    {
        get
        {
            return _syncer.Status == FileDownloadStatus.InProgress;
        }
    }

    protected bool NotDownloading
    {
        get
        {
            return !Downloading;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _syncer.OnFileListLoaded += (x) => {
            files = x;
            this.StateHasChanged();
        };

        _syncer.OnFileDownloaded += () => { this.StateHasChanged(); };

        _syncer.OnAllFilesDownloaded += () =>
        {
            System.Threading.Thread.Sleep(100);
            this.StateHasChanged();
        };

        await LoadFileListAsync(reload: false);
    }

    async Task SyncClick()
    {
        await LoadFileListAsync();
    }

    void Cancel()
    {
        _syncer.Cancel();
    }

    async Task LoadFileListAsync(bool reload = true)
    {
        await _syncer.Sync(reload);
    }
}
