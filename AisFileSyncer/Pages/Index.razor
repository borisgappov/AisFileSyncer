@page "/"
@using System
@using AisFileSyncer.Infrastructure.Interfaces
@using AisFileSyncer.Infrastructure.Models
@inject IFileListProvider _fileProvider
@inject IDownloadManager _downloadManager

@if (files == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="ReloadClick" disabled="@Downloading">Reload</button>
    <button class="btn btn-primary" @onclick="Cancel">Cancel</button>

    <table class="table">
        <thead>
            <tr>
                <th>File Name</th>
                <th>Status</th>
                <th>Progress, %</th>
                <th>Download time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in files)
            {
                <tr>
                    <td>@file.Name</td>
                    <td>@file.DownloadStatus</td>
                    <td>@file.Percent</td>
                    <td>@file.DownloadSpan.ToString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    FileModel[] files;

    protected bool Downloading
    {
        get
        {
            return _downloadManager.Status == FileDownloadStatus.InProgress;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFileListAsync(reload: false);
    }

    async Task ReloadClick()
    {
        await LoadFileListAsync();
    }

    void Cancel()
    {
        _downloadManager.Cancel();
    }

    async Task LoadFileListAsync(bool reload = true)
    {
        files = await _fileProvider.GetUrlListAsync(reload).ConfigureAwait(false);

        await _downloadManager.Download(files, (file) => this.StateHasChanged(),
            () =>
            {
                System.Threading.Thread.Sleep(100);
                this.StateHasChanged();
            });
    }
}
