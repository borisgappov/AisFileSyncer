@page "/"
@using AisFileSyncer.Infrastructure.Interfaces
@using AisFileSyncer.Infrastructure.Models
@using AisFileSyncer.Infrastructure.Utils
@inject IContentProvider _contentProvider
@inject ISyncer _syncer
@inject IJSRuntime JSRuntime

@if (_files == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Modal @ref="_modal" modalClass="@_modalCss" title="File preview">
        @switch (_previewContent.contentType)
        {
            case ContentType.Image:
                <img src="@_previewContent.content" style="height: auto; margin: auto;" />
                break;
            case ContentType.Text:
                    <pre class="m-0"><code class="language-javascript">@_previewContent.content</code></pre>
                break;
            case ContentType.Html:
                <div class="preview-content">
                    <pre><code class="language-html">@_previewContent.content</code></pre>
                </div>
                break;
        }
    </Modal>

    <div class="d-flex pb-2">
        <button class="btn btn-primary" @onclick="SyncClick" disabled="@InProgress">Sync</button>
        <button class="btn btn-primary ml-2" @onclick="ReloadAll" disabled="@InProgress">Reload</button>
        <div class="ml-2 pt-1 mr-1">
            Number of tasks:
        </div>
        <div>
            <Dropdown TItem="string" OnSelected="@OnSelected" disabled="@InProgress">
                <InitialTip>@_selectedNumber</InitialTip>
                <ChildContent>
                    @foreach (var n in _threadNumbers)
                    {
                        <DropdownListItem Item="@n.ToString()">@n</DropdownListItem>
                    }
                </ChildContent>
            </Dropdown>
        </div>
        <button class="btn btn-primary" @onclick="Cancel" disabled="@NotInProgress">Cancel</button>
        <div class="custom-control custom-checkbox m-2">
            <input type="checkbox" class="custom-control-input" id="doneCheck" @bind="exit">
            <label class="custom-control-label" for="doneCheck">Exit when done</label>
        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th width="10%">File Name</th>
                <th width="1%">Status</th>
                <th width="25%">Progress, %</th>
                <th width="10%">Time</th>
                <th width="54%">Preview</th>
            </tr>
        </thead>
        <tbody>
            @lock (_lock)
            {
                @foreach (var file in _files)
                {
                    <tr>
                        <td class="grid-row">@file.Name</td>
                        <td>

                            @switch (file.DownloadStatus)
                            {
                                case FileDownloadStatus.Waiting:
                                    <div class="spinner-border text-primary spinner-border-sm" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                    break;
                                case FileDownloadStatus.Done:
                                    <span class="oi oi-check text-success" aria-hidden="true"></span>
                                    break;
                                case FileDownloadStatus.InProgress:
                                    <div class="spinner-grow text-primary spinner-grow-sm" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                    break;
                                case FileDownloadStatus.Cancelled:
                                    <span class="oi oi-x text-danger" aria-hidden="true"></span>
                                    break;
                            }
                        </td>
                        <td>
                            <div class="progress">
                                <div class="progress-bar @(file.Percent > 0 && file.DownloadStatus == FileDownloadStatus.InProgress
                                                           ? "progress-bar-striped progress-bar-animated"
                                                           : "")"
                                     role="progressbar"
                                     style="width: @file.Percent%"
                                     aria-valuenow="@file.Percent"
                                     aria-valuemin="0"
                                     aria-valuemax="100">
                                    @(file.Percent > 0 ? file.Percent.ToString() : string.Empty)
                                </div>
                            </div>
                        </td>
                        <td>@(file.DownloadSpan == TimeSpan.Zero ? "" : file.DownloadSpan.ToString(@"mm\:ss\.fff"))</td>
                        <td>
                            @if (_contentProvider.GetContentType(file.Name) == ContentType.Unknown)
                            {
                                <span class="oi oi-file text-primary" style="font-size: 33px;"></span>
                            }
                            else if (file.DownloadStatus == FileDownloadStatus.Done)
                            {
                                <Preview fileName="@file.Name" OnClickCallback="PreviewClick"></Preview>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    object _lock = new object();
    private Modal _modal { get; set; }
    FileModel[] _files;
    int[] _threadNumbers = Enumerable.Range(1, 10).ToArray();
    int _selectedNumber = 0;
    SyncTimer _timer = new SyncTimer();
    public bool InProgress { get => _syncer?.Status == FileDownloadStatus.InProgress; }
    public bool NotInProgress { get => !InProgress; }
    PreviewContent _previewContent = new PreviewContent();
    string _modalCss = "preview-modal";
    bool exit = false;

    protected override async Task OnInitializedAsync()
    {
        _selectedNumber = _syncer.NumberOfTasks;

        _syncer.OnFileListLoaded += (x) => _files = x;

        _syncer.OnFileDownloaded += () => this.StateHasChanged();

        _syncer.OnAllFilesDownloaded += () =>
        {
            _timer.Stop();
            this.StateHasChanged();
            if (exit)
            {
                Environment.Exit(-1);
            }
        };

        if (_syncer.files == null)
        {
            await _syncer.Sync(restore: true);
            StartTimer();
        }
        else
        {
            _files = _syncer.files;
        }

        if (InProgress)
        {
            StartTimer();
        }
    }

    async Task SyncClick()
    {
        await _syncer.Sync();
        StartTimer();
    }

    async Task ReloadAll()
    {
        await _syncer.Sync(reloadAll: true);
        StartTimer();
    }

    private void OnSelected(string selection)
    {
        _selectedNumber = Convert.ToInt32(selection);
        _syncer.NumberOfTasks = _selectedNumber;
    }

    void Cancel()
    {
        _syncer.Cancel();
    }

    void StartTimer()
    {
        _timer.Start(() => this.StateHasChanged(), 300);
    }

    async Task PreviewClick(PreviewContent previewContent)
    {
        _previewContent = previewContent;
        _modalCss = "preview-modal " + (_previewContent.contentType == ContentType.Image ? "image" : "text");
        _modal.Open();
        await JSRuntime.InvokeAsync<string>("hilight");
    }
}
